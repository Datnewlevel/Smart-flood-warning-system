[
    {
        "id": "mqtt_broker_hivemq",
        "type": "mqtt-broker",
        "name": "HiveMQ Cloud",
        "broker": "df973d5a054e4b299a614f0f9da093d2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "tls_config",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "credentials": {
            "user": "Dat_smart_flood",
            "password": "23.4.2005Dat"
        }
    },
    {
        "id": "tls_config",
        "type": "tls-config",
        "name": "HiveMQ TLS",
        "cert": "",
        "key": "",
        "ca": "",
        "verifyservercert": true
    },
    {
        "id": "ui_tab_main",
        "type": "ui_tab",
        "name": "Gi√°m S√°t L≈©",
        "icon": "waves",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ui_group_alert",
        "type": "ui_group",
        "name": "Tr·∫°ng Th√°i C·∫£nh B√°o",
        "tab": "ui_tab_main",
        "order": 1,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "ui_group_gauge",
        "type": "ui_group",
        "name": "M·ª±c N∆∞·ªõc Hi·ªán T·∫°i",
        "tab": "ui_tab_main",
        "order": 2,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "ui_group_info",
        "type": "ui_group",
        "name": "Th√¥ng Tin Tr·∫°m",
        "tab": "ui_tab_main",
        "order": 3,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "ui_group_chart",
        "type": "ui_group",
        "name": "L·ªãch S·ª≠ M·ª±c N∆∞·ªõc",
        "tab": "ui_tab_main",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "ui_group_map",
        "type": "ui_group",
        "name": "V·ªã Tr√≠ Tr·∫°m",
        "tab": "ui_tab_main",
        "order": 5,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "flow_main",
        "type": "tab",
        "label": "Dashboard Gi√°m S√°t L≈©",
        "disabled": false,
        "info": ""
    },
    {
        "id": "mqtt_in_water",
        "type": "mqtt in",
        "z": "flow_main",
        "name": "Nh·∫≠n d·ªØ li·ªáu",
        "topic": "esp32/tramkiemsoat/data",
        "qos": "1",
        "datatype": "json",
        "broker": "mqtt_broker_hivemq",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 200,
        "wires": [["parse_water_data"]]
    },
    {
        "id": "parse_water_data",
        "type": "function",
        "z": "flow_main",
        "name": "X·ª≠ l√Ω d·ªØ li·ªáu",
        "func": "let waterLevel = 0;\n\nif (typeof msg.payload === 'object' && msg.payload.water_level !== undefined) {\n    waterLevel = parseFloat(msg.payload.water_level);\n} else if (typeof msg.payload === 'string') {\n    try {\n        const data = JSON.parse(msg.payload);\n        waterLevel = parseFloat(data.water_level);\n    } catch (e) {\n        return null;\n    }\n} else if (typeof msg.payload === 'number') {\n    waterLevel = msg.payload;\n}\n\nlet status = 'B√åNH TH∆Ø·ªúNG';\nlet color = '#4CAF50';\n\nif (waterLevel > 70) {\n    status = 'NGUY HI·ªÇM!';\n    color = '#F44336';\n} else if (waterLevel > 50) {\n    status = 'C·∫¢NH B√ÅO!';\n    color = '#FF9800';\n} else if (waterLevel > 30) {\n    status = 'CH√ö √ù';\n    color = '#FFEB3B';\n}\n\nflow.set('waterLevel', waterLevel);\nflow.set('status', status);\nflow.set('color', color);\nflow.set('lastUpdate', new Date().toLocaleString('vi-VN'));\n\nmsg.payload = waterLevel;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 200,
        "wires": [["ui_gauge_water", "ui_chart_history", "update_alert", "update_info"]]
    },
    {
        "id": "ui_gauge_water",
        "type": "ui_gauge",
        "z": "flow_main",
        "name": "Gauge",
        "group": "ui_group_gauge",
        "order": 1,
        "width": 4,
        "height": 5,
        "gtype": "donut",
        "title": "M·ª±c n∆∞·ªõc hi·ªán t·∫°i",
        "label": "cm",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": ["#00E676","#FFEB3B","#FF9800","#F44336"],
        "seg1": "30",
        "seg2": "50",
        "seg3": "70",
        "x": 550,
        "y": 180,
        "wires": []
    },
    {
        "id": "ui_chart_history",
        "type": "ui_chart",
        "z": "flow_main",
        "name": "Chart",
        "group": "ui_group_chart",
        "order": 1,
        "width": 8,
        "height": 5,
        "label": "L·ªãch s·ª≠ m·ª±c n∆∞·ªõc (24h)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "Ch∆∞a c√≥ d·ªØ li·ªáu",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "24",
        "removeOlderUnit": "3600",
        "colors": ["#00E5FF"],
        "x": 550,
        "y": 240,
        "wires": [[]]
    },
    {
        "id": "update_alert",
        "type": "function",
        "z": "flow_main",
        "name": "Alert HTML",
        "func": "const waterLevel = flow.get('waterLevel') || 0;\nconst status = flow.get('status') || 'B√åNH TH∆Ø·ªúNG';\n\nlet icon = 'üíß';\nlet bg = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';\n\nif (waterLevel > 70) {\n    icon = 'üö®';\n    bg = 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)';\n} else if (waterLevel > 50) {\n    icon = '‚ö†Ô∏è';\n    bg = 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)';\n} else if (waterLevel > 30) {\n    icon = '‚ö°';\n    bg = 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)';\n}\n\nmsg.payload = `\n<style>\n.alert-box {\n    background: ${bg};\n    padding: 20px 15px;\n    border-radius: 15px;\n    text-align: center;\n    box-shadow: 0 10px 30px rgba(0,0,0,0.3);\n    animation: pulse 2s infinite;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n.alert-icon { font-size: 50px; margin-bottom: 8px; }\n.alert-title {\n    font-size: 24px;\n    font-weight: bold;\n    color: white;\n    text-shadow: 2px 2px 6px rgba(0,0,0,0.4);\n    margin: 0;\n    line-height: 1.3;\n}\n@keyframes pulse {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.02); }\n}\n</style>\n<div class=\"alert-box\">\n    <div class=\"alert-icon\">${icon}</div>\n    <h1 class=\"alert-title\">C·∫¢NH B√ÅO<br>M·ª∞C N∆Ø·ªöC:<br>${status}</h1>\n</div>\n`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 300,
        "wires": [["ui_template_alert"]]
    },
    {
        "id": "ui_template_alert",
        "type": "ui_template",
        "z": "flow_main",
        "group": "ui_group_alert",
        "name": "Alert Display",
        "order": 1,
        "width": 4,
        "height": 5,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 760,
        "y": 300,
        "wires": [[]]
    },
    {
        "id": "update_info",
        "type": "function",
        "z": "flow_main",
        "name": "Info HTML",
        "func": "const waterLevel = flow.get('waterLevel') || 0;\nconst status = flow.get('status') || 'B√åNH TH∆Ø·ªúNG';\nconst lastUpdate = flow.get('lastUpdate') || 'Ch∆∞a c√≥';\n\nlet color = '#00E676';\nif (waterLevel > 70) color = '#F44336';\nelse if (waterLevel > 50) color = '#FF9800';\nelse if (waterLevel > 30) color = '#FFEB3B';\n\nmsg.payload = `\n<style>\n.info-box {\n    background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);\n    padding: 20px;\n    border-radius: 15px;\n    color: white;\n    box-shadow: 0 10px 30px rgba(0,0,0,0.3);\n}\n.water-big {\n    text-align: center;\n    font-size: 44px;\n    font-weight: bold;\n    color: ${color};\n    margin: 15px 0;\n    text-shadow: 0 0 20px ${color};\n}\n.info-row {\n    margin: 12px 0;\n    padding: 12px;\n    background: rgba(255,255,255,0.1);\n    border-left: 3px solid #00E5FF;\n    border-radius: 5px;\n}\n.info-label {\n    color: #00E5FF;\n    font-weight: bold;\n    font-size: 12px;\n}\n.info-value {\n    color: #fff;\n    font-size: 16px;\n    margin-top: 5px;\n}\n</style>\n<div class=\"info-box\">\n    <div class=\"water-big\">${waterLevel.toFixed(1)} cm</div>\n    <div class=\"info-row\">\n        <div class=\"info-label\">TR·∫†M</div>\n        <div class=\"info-value\">Tri·ªÅu Kh√∫c</div>\n    </div>\n    <div class=\"info-row\">\n        <div class=\"info-label\">ƒê·ªäA ƒêI·ªÇM</div>\n        <div class=\"info-value\">Q. Thanh Xu√¢n, H√† N·ªôi</div>\n    </div>\n    <div class=\"info-row\">\n        <div class=\"info-label\">C·∫¨P NH·∫¨T</div>\n        <div class=\"info-value\">${lastUpdate}</div>\n    </div>\n</div>\n`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 360,
        "wires": [["ui_template_info"]]
    },
    {
        "id": "ui_template_info",
        "type": "ui_template",
        "z": "flow_main",
        "group": "ui_group_info",
        "name": "Info Display",
        "order": 1,
        "width": 4,
        "height": 5,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 760,
        "y": 360,
        "wires": [[]]
    },
    {
        "id": "ui_template_map",
        "type": "ui_template",
        "z": "flow_main",
        "group": "ui_group_map",
        "name": "Map Display",
        "order": 1,
        "width": 4,
        "height": 5,
        "format": "<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n<style>\n#map { height: 310px; border-radius: 12px; box-shadow: 0 8px 20px rgba(0,0,0,0.3); }\n</style>\n<div id=\"map\"></div>\n<script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n<script>\nvar init = false;\nif (!init) {\n    init = true;\n    setTimeout(function() {\n        var map = L.map('map').setView([20.9967, 105.8045], 14);\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n        var marker = L.marker([20.9967, 105.8045]).addTo(map);\n        marker.bindPopup('<b>Tr·∫°m Tri·ªÅu Kh√∫c</b><br>Q. Thanh Xu√¢n, H√† N·ªôi').openPopup();\n        L.circle([20.9967, 105.8045], {color: '#FF9800', fillColor: '#FF9800', fillOpacity: 0.15, radius: 500}).addTo(map);\n        setTimeout(function(){ map.invalidateSize(); }, 100);\n    }, 500);\n}\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 330,
        "y": 460,
        "wires": [[]]
    },
    {
        "id": "inject_test_20",
        "type": "inject",
        "z": "flow_main",
        "name": "Test 20cm",
        "props": [{"p": "payload"}],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{\"water_level\":20}",
        "payloadType": "json",
        "x": 130,
        "y": 80,
        "wires": [["parse_water_data"]]
    },
    {
        "id": "inject_test_55",
        "type": "inject",
        "z": "flow_main",
        "name": "Test 55cm",
        "props": [{"p": "payload"}],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{\"water_level\":55}",
        "payloadType": "json",
        "x": 130,
        "y": 120,
        "wires": [["parse_water_data"]]
    },
    {
        "id": "inject_test_80",
        "type": "inject",
        "z": "flow_main",
        "name": "Test 80cm",
        "props": [{"p": "payload"}],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{\"water_level\":80}",
        "payloadType": "json",
        "x": 130,
        "y": 160,
        "wires": [["parse_water_data"]]
    }
]