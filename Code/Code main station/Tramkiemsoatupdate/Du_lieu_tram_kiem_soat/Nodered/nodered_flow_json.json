[
    {
        "id": "websocket_config",
        "type": "websocket-listener",
        "path": "/ws/water-data",
        "wholemsg": "false"
    },
    {
        "id": "http_dashboard",
        "type": "http in",
        "name": "Dashboard HTML Endpoint",
        "url": "/dashboard",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 100,
        "wires": [["template_html"]]
    },
    {
        "id": "template_html",
        "type": "template",
        "name": "Dashboard HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"vi\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Gi√°m S√°t L≈©</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n    <script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n        }\n        .header {\n            background: linear-gradient(90deg, #0891b2 0%, #06b6d4 100%);\n            color: white;\n            padding: 20px;\n            text-align: center;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        }\n        .header h1 { font-size: 2em; font-weight: 600; }\n        .container { max-width: 1400px; margin: 30px auto; padding: 0 20px; }\n        .grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 20px;\n            margin-bottom: 20px;\n        }\n        .card {\n            background: white;\n            border-radius: 15px;\n            padding: 25px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n            transition: transform 0.3s ease;\n        }\n        .card:hover { transform: translateY(-5px); }\n        .card-title {\n            color: #0891b2;\n            font-size: 1.3em;\n            font-weight: 600;\n            margin-bottom: 20px;\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        .alert-card {\n            background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);\n            border-left: 5px solid #ef4444;\n        }\n        .alert-card .card-title { color: #dc2626; }\n        .alert-icon { font-size: 2em; animation: pulse 2s infinite; }\n        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }\n        .alert-text {\n            font-size: 1.5em;\n            font-weight: bold;\n            color: #991b1b;\n            text-align: center;\n            margin: 15px 0;\n        }\n        .gauge-container { position: relative; width: 250px; height: 250px; margin: 20px auto; }\n        .gauge-value {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            text-align: center;\n        }\n        .gauge-value .number { font-size: 3em; font-weight: bold; color: #0891b2; }\n        .gauge-value .unit { font-size: 1.2em; color: #64748b; }\n        .info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 15px; }\n        .info-item { background: #f1f5f9; padding: 12px; border-radius: 8px; }\n        .info-label { font-size: 0.85em; color: #64748b; margin-bottom: 5px; }\n        .info-value { font-size: 1.1em; font-weight: 600; color: #1e293b; }\n        .chart-container { height: 300px; position: relative; }\n        .map-container { height: 400px; border-radius: 10px; overflow: hidden; }\n        .full-width { grid-column: 1 / -1; }\n        .status-indicator {\n            display: inline-block;\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            margin-right: 8px;\n        }\n        .status-danger { background: #ef4444; box-shadow: 0 0 10px #ef4444; }\n        .status-warning { background: #f59e0b; box-shadow: 0 0 10px #f59e0b; }\n        .status-safe { background: #10b981; box-shadow: 0 0 10px #10b981; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>üåä Gi√°m S√°t L≈© - HiveMQ</h1>\n    </div>\n    <div class=\"container\">\n        <div class=\"grid\">\n            <div class=\"card alert-card\">\n                <div class=\"card-title\">\n                    <span class=\"alert-icon\">‚ö°</span>\n                    Tr·∫°ng Th√°i C·∫£nh B√°o\n                </div>\n                <div class=\"alert-text\" id=\"alertStatus\">ƒêang ch·ªù d·ªØ li·ªáu...</div>\n                <div style=\"text-align: center; margin-top: 10px;\">\n                    <span class=\"status-indicator status-safe\" id=\"statusIndicator\"></span>\n                    <span style=\"font-weight: 600;\" id=\"statusText\">ƒêang k·∫øt n·ªëi...</span>\n                </div>\n            </div>\n            <div class=\"card\">\n                <div class=\"card-title\">üíß M·ª±c N∆∞·ªõc Hi·ªán T·∫°i</div>\n                <div class=\"gauge-container\">\n                    <canvas id=\"gaugeChart\"></canvas>\n                    <div class=\"gauge-value\">\n                        <div class=\"number\" id=\"waterLevel\">--</div>\n                        <div class=\"unit\">cm</div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card\">\n                <div class=\"card-title\">üìç Th√¥ng Tin Tr·∫°m</div>\n                <div class=\"info-grid\">\n                    <div class=\"info-item\">\n                        <div class=\"info-label\">M·ª±c n∆∞·ªõc</div>\n                        <div class=\"info-value\" id=\"infoWaterLevel\">-- cm</div>\n                    </div>\n                    <div class=\"info-item\">\n                        <div class=\"info-label\">Tr·∫°m</div>\n                        <div class=\"info-value\" id=\"stationName\">TRAM</div>\n                    </div>\n                    <div class=\"info-item\">\n                        <div class=\"info-label\">Tri·ªÅu Kh√∫c</div>\n                        <div class=\"info-value\">Tri·ªÅu Kh√∫c</div>\n                    </div>\n                    <div class=\"info-item\">\n                        <div class=\"info-label\">ƒê·ªãa ƒëi·ªÉm</div>\n                        <div class=\"info-value\">ƒê·ªäA ƒêI·ªÇM</div>\n                    </div>\n                </div>\n                <div class=\"info-item\" style=\"margin-top: 15px;\">\n                    <div class=\"info-label\">V·ªã tr√≠</div>\n                    <div class=\"info-value\">Q. Thanh Xu√¢n, H√† N·ªôi</div>\n                </div>\n                <div class=\"info-item\" style=\"margin-top: 10px;\">\n                    <div class=\"info-label\">C·∫≠p nh·∫≠t</div>\n                    <div class=\"info-value\" id=\"lastUpdate\">--:--:--</div>\n                </div>\n            </div>\n            <div class=\"card\">\n                <div class=\"card-title\">üó∫Ô∏è V·ªã Tr√≠ Tr·∫°m</div>\n                <div class=\"map-container\" id=\"map\"></div>\n            </div>\n            <div class=\"card full-width\">\n                <div class=\"card-title\">üìä L·ªãch S·ª≠ M·ª±c N∆∞·ªõc (24h)</div>\n                <div class=\"chart-container\">\n                    <canvas id=\"historyChart\"></canvas>\n                </div>\n            </div>\n        </div>\n    </div>\n    <script>\n        let gaugeChart, historyChart;\n        let historyData = [];\n        const maxDataPoints = 50;\n        \n        // WebSocket connection - QUAN TR·ªåNG: Thay YOUR_HOST b·∫±ng ƒë·ªãa ch·ªâ th·ª±c t·∫ø\n        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n        const ws = new WebSocket(wsProtocol + '//' + window.location.host + '/ws/water-data');\n        \n        ws.onopen = () => {\n            console.log('‚úÖ WebSocket connected');\n            document.getElementById('statusText').textContent = 'ƒê√£ k·∫øt n·ªëi';\n        };\n        \n        ws.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data);\n                updateDashboard(data);\n            } catch (e) {\n                console.error('Error parsing data:', e);\n            }\n        };\n        \n        ws.onerror = (error) => {\n            console.error('‚ùå WebSocket error:', error);\n            document.getElementById('statusText').textContent = 'L·ªói k·∫øt n·ªëi';\n        };\n        \n        ws.onclose = () => {\n            console.log('üîå WebSocket disconnected');\n            document.getElementById('statusText').textContent = 'M·∫•t k·∫øt n·ªëi';\n            // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5s\n            setTimeout(() => window.location.reload(), 5000);\n        };\n        \n        // Initialize Gauge Chart\n        const gaugeCtx = document.getElementById('gaugeChart').getContext('2d');\n        gaugeChart = new Chart(gaugeCtx, {\n            type: 'doughnut',\n            data: {\n                datasets: [{\n                    data: [0, 100],\n                    backgroundColor: ['#fbbf24', '#e5e7eb'],\n                    borderWidth: 0\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: true,\n                cutout: '75%',\n                plugins: {\n                    legend: { display: false },\n                    tooltip: { enabled: false }\n                }\n            }\n        });\n        \n        // Initialize History Chart\n        const historyCtx = document.getElementById('historyChart').getContext('2d');\n        historyChart = new Chart(historyCtx, {\n            type: 'line',\n            data: {\n                labels: [],\n                datasets: [{\n                    label: 'M·ª±c n∆∞·ªõc (cm)',\n                    data: [],\n                    borderColor: '#06b6d4',\n                    backgroundColor: 'rgba(6, 182, 212, 0.1)',\n                    borderWidth: 3,\n                    tension: 0.4,\n                    fill: true,\n                    pointBackgroundColor: '#06b6d4',\n                    pointRadius: 4,\n                    pointHoverRadius: 6\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: { legend: { display: false } },\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        grid: { color: '#f1f5f9' }\n                    },\n                    x: { grid: { display: false } }\n                }\n            }\n        });\n        \n        // Initialize Map\n        const map = L.map('map').setView([20.9993, 105.8047], 14);\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: '¬© OpenStreetMap contributors'\n        }).addTo(map);\n        const marker = L.marker([20.9993, 105.8047]).addTo(map);\n        marker.bindPopup('<b>Tr·∫°m Tri·ªÅu Kh√∫c</b><br>Thanh Xu√¢n, H√† N·ªôi').openPopup();\n        L.circle([20.9993, 105.8047], {\n            color: '#f59e0b',\n            fillColor: '#fbbf24',\n            fillOpacity: 0.3,\n            radius: 500\n        }).addTo(map);\n        \n        function updateDashboard(data) {\n            // Parse water level t·ª´ data\n            let waterLevel = 0;\n            \n            // X·ª≠ l√Ω nhi·ªÅu format data kh√°c nhau\n            if (typeof data === 'number') {\n                waterLevel = data;\n            } else if (data.waterLevel) {\n                waterLevel = parseFloat(data.waterLevel);\n            } else if (data.level) {\n                waterLevel = parseFloat(data.level);\n            } else if (data.payload) {\n                waterLevel = parseFloat(data.payload);\n            }\n            \n            const timestamp = data.timestamp || new Date().toLocaleTimeString('vi-VN');\n            \n            // Update water level display\n            document.getElementById('waterLevel').textContent = waterLevel.toFixed(2);\n            document.getElementById('infoWaterLevel').textContent = waterLevel.toFixed(1) + ' cm';\n            document.getElementById('lastUpdate').textContent = timestamp;\n            \n            // Update gauge\n            const maxLevel = 100;\n            const percentage = Math.min((waterLevel / maxLevel) * 100, 100);\n            gaugeChart.data.datasets[0].data = [percentage, 100 - percentage];\n            \n            // Thay ƒë·ªïi m√†u gauge theo m·ª©c ƒë·ªô\n            if (waterLevel > 70) {\n                gaugeChart.data.datasets[0].backgroundColor = ['#ef4444', '#e5e7eb'];\n            } else if (waterLevel > 40) {\n                gaugeChart.data.datasets[0].backgroundColor = ['#fbbf24', '#e5e7eb'];\n            } else {\n                gaugeChart.data.datasets[0].backgroundColor = ['#10b981', '#e5e7eb'];\n            }\n            gaugeChart.update('none');\n            \n            // Update alert status\n            let alertStatus, statusClass, statusText;\n            if (waterLevel > 70) {\n                alertStatus = '‚ö†Ô∏è C·∫¢NH B√ÅO M·ª∞C N∆Ø·ªöC: NGUY HI·ªÇM';\n                statusClass = 'status-danger';\n                statusText = 'M·ª©c C·∫£nh B√°o ƒê·ªè';\n            } else if (waterLevel > 40) {\n                alertStatus = '‚ö° C·∫¢NH B√ÅO M·ª∞C N∆Ø·ªöC: CH√ö √ù';\n                statusClass = 'status-warning';\n                statusText = 'M·ª©c C·∫£nh B√°o V√†ng';\n            } else {\n                alertStatus = '‚úÖ M·ª∞C N∆Ø·ªöC: AN TO√ÄN';\n                statusClass = 'status-safe';\n                statusText = 'M·ª©c An To√†n';\n            }\n            document.getElementById('alertStatus').textContent = alertStatus;\n            document.getElementById('statusIndicator').className = 'status-indicator ' + statusClass;\n            document.getElementById('statusText').textContent = statusText;\n            \n            // Update history chart\n            const timeLabel = new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });\n            historyData.push({ time: timeLabel, value: waterLevel });\n            if (historyData.length > maxDataPoints) {\n                historyData.shift();\n            }\n            historyChart.data.labels = historyData.map(d => d.time);\n            historyChart.data.datasets[0].data = historyData.map(d => d.value);\n            historyChart.update('none');\n        }\n    </script>\n</body>\n</html>",
        "output": "str",
        "x": 340,
        "y": 100,
        "wires": [["http_response"]]
    },
    {
        "id": "http_response",
        "type": "http response",
        "name": "Send HTML Response",
        "statusCode": "",
        "headers": {},
        "x": 540,
        "y": 100,
        "wires": []
    },
    {
        "id": "format_mqtt_data",
        "type": "function",
        "name": "Format Data t·ª´ HiveMQ",
        "func": "// Node n√†y nh·∫≠n data t·ª´ MQTT v√† format l·∫°i\n// K·∫øt n·ªëi output c·ªßa node \"Nh·∫≠n d·ªØ li·ªáu\" v√†o ƒë√¢y\n\nlet waterLevel = 0;\n\n// X·ª≠ l√Ω nhi·ªÅu format kh√°c nhau\nif (typeof msg.payload === 'string') {\n    // N·∫øu l√† string s·ªë: \"38.5\"\n    waterLevel = parseFloat(msg.payload);\n} else if (typeof msg.payload === 'number') {\n    // N·∫øu l√† s·ªë tr·ª±c ti·∫øp: 38.5\n    waterLevel = msg.payload;\n} else if (typeof msg.payload === 'object') {\n    // N·∫øu l√† object: {level: 38.5} ho·∫∑c {waterLevel: 38.5}\n    waterLevel = msg.payload.level || msg.payload.waterLevel || msg.payload.value || 0;\n}\n\n// T·∫°o timestamp\nconst now = new Date();\nconst timestamp = now.toLocaleString('vi-VN', {\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n});\n\n// Format data chu·∫©n ƒë·ªÉ g·ª≠i ƒëi\nmsg.payload = {\n    waterLevel: waterLevel.toFixed(2),\n    timestamp: timestamp,\n    station: msg.topic || \"TRAM\",\n    location: \"Q. Thanh Xu√¢n, H√† N·ªôi\"\n};\n\n// L∆∞u v√†o context ƒë·ªÉ d√πng cho HTTP API\nflow.set('latestWaterData', msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 200,
        "wires": [["websocket_out", "debug_formatted"]]
    },
    {
        "id": "websocket_out",
        "type": "websocket out",
        "name": "G·ª≠i ƒë·∫øn Dashboard",
        "server": "websocket_config",
        "client": "",
        "x": 650,
        "y": 200,
        "wires": []
    },
    {
        "id": "debug_formatted",
        "type": "debug",
        "name": "Debug Formatted Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 260,
        "wires": []
    },
    {
        "id": "http_api",
        "type": "http in",
        "name": "API Get Latest Data",
        "url": "/api/water-data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 320,
        "wires": [["get_context_data"]]
    },
    {
        "id": "get_context_data",
        "type": "function",
        "name": "Get from Context",
        "func": "// L·∫•y data m·ªõi nh·∫•t t·ª´ context\nconst latestData = flow.get('latestWaterData') || {\n    waterLevel: \"0.00\",\n    timestamp: new Date().toLocaleString('vi-VN'),\n    station: \"TRAM\",\n    location: \"Q. Thanh Xu√¢n, H√† N·ªôi\"\n};\n\nmsg.payload = latestData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [["http_api_response"]]
    },
    {
        "id": "http_api_response",
        "type": "http response",
        "name": "Return JSON",
        "statusCode": "",
        "headers": {"content-type": "application/json"},
        "x": 570,
        "y": 320,
        "wires": []
    },
    {
        "id": "comment_1",
        "type": "comment",
        "name": "üåê DASHBOARD HTML - Truy c·∫≠p: http://localhost:1880/dashboard",
        "info": "",
        "x": 240,
        "y": 60,
        "wires": []
    },
    {
        "id": "comment_2",
        "type": "comment",
        "name": "üîÑ K·∫æT N·ªêI V·ªöI MQTT - N·ªëi output c·ªßa 'Nh·∫≠n d·ªØ li·ªáu' v√†o 'Format Data'",
        "info": "",
        "x": 260,
        "y": 160,
        "wires": []
    },
    {
        "id": "comment_3",
        "type": "comment",
        "name": "üì° API ENDPOINT - Backup n·∫øu WebSocket l·ªói",
        "info": "",
        "x": 200,
        "y": 280,
        "wires": []
    }
]