[
    {
        "id": "ws_config_new",
        "type": "websocket-listener",
        "path": "/ws/water-data",
        "wholemsg": "false"
    },
    {
        "id": "new_dashboard_flow",
        "type": "tab",
        "label": "Dashboard Web M·ªõi",
        "disabled": false,
        "info": ""
    },
    {
        "id": "http_serve_dashboard",
        "type": "http in",
        "z": "new_dashboard_flow",
        "name": "GET /dashboard",
        "url": "/dashboard",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 80,
        "wires": [["html_template_node"]]
    },
    {
        "id": "html_template_node",
        "type": "template",
        "z": "new_dashboard_flow",
        "name": "HTML Dashboard",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"vi\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Gi√°m S√°t L≈©</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n    <script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n        }\n        .header {\n            background: linear-gradient(90deg, #0891b2 0%, #06b6d4 100%);\n            color: white;\n            padding: 20px;\n            text-align: center;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        }\n        .header h1 { font-size: 2em; font-weight: 600; }\n        .status-bar {\n            position: fixed;\n            top: 10px;\n            right: 10px;\n            padding: 8px 16px;\n            background: white;\n            border-radius: 20px;\n            box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n            font-size: 14px;\n            font-weight: 600;\n            z-index: 9999;\n        }\n        .container { max-width: 1400px; margin: 30px auto; padding: 0 20px; }\n        .grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 20px;\n            margin-bottom: 20px;\n        }\n        .card {\n            background: white;\n            border-radius: 15px;\n            padding: 25px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n            transition: transform 0.3s ease;\n        }\n        .card:hover { transform: translateY(-5px); }\n        .card-title {\n            color: #0891b2;\n            font-size: 1.3em;\n            font-weight: 600;\n            margin-bottom: 20px;\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        .alert-card {\n            background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);\n            border-left: 5px solid #10b981;\n        }\n        .alert-card.warning {\n            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);\n            border-left: 5px solid #f59e0b;\n        }\n        .alert-card.danger {\n            background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);\n            border-left: 5px solid #ef4444;\n        }\n        .alert-icon { font-size: 2.5em; animation: pulse 2s infinite; }\n        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.6; } }\n        .alert-text {\n            font-size: 1.5em;\n            font-weight: bold;\n            text-align: center;\n            margin: 15px 0;\n        }\n        .gauge-container { position: relative; width: 250px; height: 250px; margin: 20px auto; }\n        .gauge-value {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            text-align: center;\n        }\n        .gauge-value .number { font-size: 3em; font-weight: bold; color: #0891b2; }\n        .gauge-value .unit { font-size: 1.2em; color: #64748b; }\n        .info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 15px; }\n        .info-item { background: #f1f5f9; padding: 12px; border-radius: 8px; }\n        .info-label { font-size: 0.85em; color: #64748b; margin-bottom: 5px; }\n        .info-value { font-size: 1.1em; font-weight: 600; color: #1e293b; }\n        .chart-container { height: 300px; position: relative; }\n        .map-container { height: 400px; border-radius: 10px; overflow: hidden; }\n        .full-width { grid-column: 1 / -1; }\n        .status-dot {\n            display: inline-block;\n            width: 10px;\n            height: 10px;\n            border-radius: 50%;\n            margin-right: 6px;\n            animation: blink 1.5s infinite;\n        }\n        @keyframes blink { 0%, 100% { opacity: 1; } 50% { opacity: 0.3; } }\n        .status-online { background: #10b981; }\n        .status-offline { background: #ef4444; }\n    </style>\n</head>\n<body>\n    <div class=\"status-bar\">\n        <span class=\"status-dot status-offline\" id=\"statusDot\"></span>\n        <span id=\"statusText\">ƒêang k·∫øt n·ªëi...</span>\n    </div>\n    <div class=\"header\">\n        <h1>üåä Gi√°m S√°t L≈© - HiveMQ Cloud</h1>\n    </div>\n    <div class=\"container\">\n        <div class=\"grid\">\n            <div class=\"card alert-card\" id=\"alertCard\">\n                <div class=\"card-title\">\n                    <span class=\"alert-icon\" id=\"alertIcon\">üíß</span>\n                    Tr·∫°ng Th√°i C·∫£nh B√°o\n                </div>\n                <div class=\"alert-text\" id=\"alertStatus\">ƒêang ch·ªù d·ªØ li·ªáu...</div>\n            </div>\n            <div class=\"card\">\n                <div class=\"card-title\">üíß M·ª±c N∆∞·ªõc Hi·ªán T·∫°i</div>\n                <div class=\"gauge-container\">\n                    <canvas id=\"gaugeChart\"></canvas>\n                    <div class=\"gauge-value\">\n                        <div class=\"number\" id=\"waterLevel\">--</div>\n                        <div class=\"unit\">cm</div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card\">\n                <div class=\"card-title\">üìç Th√¥ng Tin Tr·∫°m</div>\n                <div class=\"info-grid\">\n                    <div class=\"info-item\">\n                        <div class=\"info-label\">M·ª±c n∆∞·ªõc</div>\n                        <div class=\"info-value\" id=\"infoWaterLevel\">-- cm</div>\n                    </div>\n                    <div class=\"info-item\">\n                        <div class=\"info-label\">Tr·∫°m</div>\n                        <div class=\"info-value\">Tri·ªÅu Kh√∫c</div>\n                    </div>\n                    <div class=\"info-item\">\n                        <div class=\"info-label\">ƒê·ªãa ƒëi·ªÉm</div>\n                        <div class=\"info-value\">Q. Thanh Xu√¢n</div>\n                    </div>\n                    <div class=\"info-item\">\n                        <div class=\"info-label\">Th√†nh ph·ªë</div>\n                        <div class=\"info-value\">H√† N·ªôi</div>\n                    </div>\n                </div>\n                <div class=\"info-item\" style=\"margin-top: 15px;\">\n                    <div class=\"info-label\">C·∫≠p nh·∫≠t l·∫ßn cu·ªëi</div>\n                    <div class=\"info-value\" id=\"lastUpdate\">--:--:--</div>\n                </div>\n            </div>\n            <div class=\"card\">\n                <div class=\"card-title\">üó∫Ô∏è V·ªã Tr√≠ Tr·∫°m</div>\n                <div class=\"map-container\" id=\"map\"></div>\n            </div>\n            <div class=\"card full-width\">\n                <div class=\"card-title\">üìä L·ªãch S·ª≠ M·ª±c N∆∞·ªõc (Real-time)</div>\n                <div class=\"chart-container\">\n                    <canvas id=\"historyChart\"></canvas>\n                </div>\n            </div>\n        </div>\n    </div>\n    <script>\n        let gaugeChart, historyChart, map;\n        let historyData = [];\n        const maxDataPoints = 30;\n        let ws;\n        \n        // WebSocket connection\n        function connectWS() {\n            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n            const wsUrl = protocol + '//' + window.location.host + '/ws/water-data';\n            \n            console.log('Connecting to:', wsUrl);\n            ws = new WebSocket(wsUrl);\n            \n            ws.onopen = () => {\n                console.log('‚úÖ WebSocket connected');\n                document.getElementById('statusDot').className = 'status-dot status-online';\n                document.getElementById('statusText').textContent = 'ƒê√£ k·∫øt n·ªëi';\n            };\n            \n            ws.onmessage = (event) => {\n                try {\n                    const data = JSON.parse(event.data);\n                    console.log('Received:', data);\n                    updateDashboard(data);\n                } catch (e) {\n                    console.error('Parse error:', e);\n                }\n            };\n            \n            ws.onerror = (error) => {\n                console.error('WebSocket error:', error);\n                document.getElementById('statusDot').className = 'status-dot status-offline';\n                document.getElementById('statusText').textContent = 'L·ªói k·∫øt n·ªëi';\n            };\n            \n            ws.onclose = () => {\n                console.log('WebSocket closed, reconnecting...');\n                document.getElementById('statusDot').className = 'status-dot status-offline';\n                document.getElementById('statusText').textContent = 'M·∫•t k·∫øt n·ªëi';\n                setTimeout(connectWS, 3000);\n            };\n        }\n        \n        // Initialize charts\n        const gaugeCtx = document.getElementById('gaugeChart').getContext('2d');\n        gaugeChart = new Chart(gaugeCtx, {\n            type: 'doughnut',\n            data: {\n                datasets: [{\n                    data: [0, 100],\n                    backgroundColor: ['#10b981', '#e5e7eb'],\n                    borderWidth: 0\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: true,\n                cutout: '75%',\n                plugins: { legend: { display: false }, tooltip: { enabled: false } }\n            }\n        });\n        \n        const historyCtx = document.getElementById('historyChart').getContext('2d');\n        historyChart = new Chart(historyCtx, {\n            type: 'line',\n            data: {\n                labels: [],\n                datasets: [{\n                    label: 'M·ª±c n∆∞·ªõc (cm)',\n                    data: [],\n                    borderColor: '#06b6d4',\n                    backgroundColor: 'rgba(6, 182, 212, 0.1)',\n                    borderWidth: 3,\n                    tension: 0.4,\n                    fill: true,\n                    pointBackgroundColor: '#06b6d4',\n                    pointRadius: 4\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: { legend: { display: false } },\n                scales: {\n                    y: { beginAtZero: true, max: 100, grid: { color: '#f1f5f9' } },\n                    x: { grid: { display: false } }\n                }\n            }\n        });\n        \n        // Initialize map\n        map = L.map('map').setView([20.9967, 105.8045], 14);\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n        const marker = L.marker([20.9967, 105.8045]).addTo(map);\n        marker.bindPopup('<b>Tr·∫°m Tri·ªÅu Kh√∫c</b><br>Q. Thanh Xu√¢n, H√† N·ªôi').openPopup();\n        L.circle([20.9967, 105.8045], {\n            color: '#f59e0b',\n            fillColor: '#fbbf24',\n            fillOpacity: 0.2,\n            radius: 500\n        }).addTo(map);\n        \n        function updateDashboard(data) {\n            let waterLevel = parseFloat(data.water_level || data.waterLevel || 0);\n            const timestamp = new Date().toLocaleTimeString('vi-VN');\n            \n            // Update displays\n            document.getElementById('waterLevel').textContent = waterLevel.toFixed(2);\n            document.getElementById('infoWaterLevel').textContent = waterLevel.toFixed(1) + ' cm';\n            document.getElementById('lastUpdate').textContent = new Date().toLocaleString('vi-VN');\n            \n            // Update gauge\n            const percentage = Math.min((waterLevel / 100) * 100, 100);\n            let gaugeColor = '#10b981';\n            if (waterLevel > 70) gaugeColor = '#ef4444';\n            else if (waterLevel > 50) gaugeColor = '#f59e0b';\n            else if (waterLevel > 30) gaugeColor = '#fbbf24';\n            \n            gaugeChart.data.datasets[0].data = [percentage, 100 - percentage];\n            gaugeChart.data.datasets[0].backgroundColor = [gaugeColor, '#e5e7eb'];\n            gaugeChart.update('none');\n            \n            // Update alert\n            const alertCard = document.getElementById('alertCard');\n            const alertIcon = document.getElementById('alertIcon');\n            const alertStatus = document.getElementById('alertStatus');\n            \n            alertCard.className = 'card alert-card';\n            if (waterLevel > 70) {\n                alertCard.className += ' danger';\n                alertIcon.textContent = 'üö®';\n                alertStatus.textContent = '‚ö†Ô∏è NGUY HI·ªÇM!';\n                alertStatus.style.color = '#991b1b';\n            } else if (waterLevel > 50) {\n                alertCard.className += ' warning';\n                alertIcon.textContent = '‚ö°';\n                alertStatus.textContent = '‚ö†Ô∏è C·∫¢NH B√ÅO!';\n                alertStatus.style.color = '#92400e';\n            } else if (waterLevel > 30) {\n                alertCard.className += ' warning';\n                alertIcon.textContent = 'üí°';\n                alertStatus.textContent = 'CH√ö √ù';\n                alertStatus.style.color = '#92400e';\n            } else {\n                alertIcon.textContent = '‚úÖ';\n                alertStatus.textContent = 'B√åNH TH∆Ø·ªúNG';\n                alertStatus.style.color = '#065f46';\n            }\n            \n            // Update chart\n            historyData.push({ time: timestamp, value: waterLevel });\n            if (historyData.length > maxDataPoints) historyData.shift();\n            \n            historyChart.data.labels = historyData.map(d => d.time);\n            historyChart.data.datasets[0].data = historyData.map(d => d.value);\n            historyChart.update('none');\n        }\n        \n        // Connect on load\n        connectWS();\n    </script>\n</body>\n</html>",
        "output": "str",
        "x": 360,
        "y": 80,
        "wires": [["http_response_dashboard"]]
    },
    {
        "id": "http_response_dashboard",
        "type": "http response",
        "z": "new_dashboard_flow",
        "name": "Send Response",
        "statusCode": "",
        "headers": {},
        "x": 590,
        "y": 80,
        "wires": []
    },
    {
        "id": "mqtt_to_websocket",
        "type": "function",
        "z": "new_dashboard_flow",
        "name": "Format cho WebSocket",
        "func": "// Nh·∫≠n data t·ª´ flow c≈©\nlet waterLevel = 0;\n\nif (typeof msg.payload === 'object' && msg.payload.water_level !== undefined) {\n    waterLevel = parseFloat(msg.payload.water_level);\n} else if (typeof msg.payload === 'number') {\n    waterLevel = msg.payload;\n} else if (typeof msg.payload === 'string') {\n    try {\n        const data = JSON.parse(msg.payload);\n        waterLevel = parseFloat(data.water_level);\n    } catch (e) {\n        waterLevel = parseFloat(msg.payload);\n    }\n}\n\n// Format data g·ª≠i qua WebSocket\nconst data = {\n    water_level: waterLevel,\n    timestamp: new Date().toISOString()\n};\n\n// QUAN TR·ªåNG: Ph·∫£i stringify ƒë·ªÉ WebSocket g·ª≠i ƒë∆∞·ª£c\nmsg.payload = JSON.stringify(data);\n\nnode.status({fill:\"green\",shape:\"dot\",text:`${waterLevel} cm`});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [["ws_out_dashboard", "debug_ws_data"]]
    },
    {
        "id": "ws_out_dashboard",
        "type": "websocket out",
        "z": "new_dashboard_flow",
        "name": "WebSocket Send",
        "server": "ws_config_new",
        "client": "",
        "x": 660,
        "y": 180,
        "wires": []
    },
    {
        "id": "debug_ws_data",
        "type": "debug",
        "z": "new_dashboard_flow",
        "name": "Debug WebSocket",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 240,
        "wires": []
    },
    {
        "id": "link_in_from_old_flow",
        "type": "link in",
        "z": "new_dashboard_flow",
        "name": "Nh·∫≠n t·ª´ flow c≈©",
        "links": [],
        "x": 135,
        "y": 180,
        "wires": [["mqtt_to_websocket"]]
    },
    {
        "id": "comment_instruction",
        "type": "comment",
        "z": "new_dashboard_flow",
        "name": "üìå K·∫æT N·ªêI: Trong flow c≈©, th√™m node 'link out' sau node 'X·ª≠ l√Ω d·ªØ li·ªáu', ch·ªçn link ƒë·∫øn 'Nh·∫≠n t·ª´ flow c≈©'",
        "info": "",
        "x": 390,
        "y": 140,
        "wires": []
    }
]