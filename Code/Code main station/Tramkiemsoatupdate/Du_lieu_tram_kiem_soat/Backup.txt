1.Main station code
#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "esp_log.h"
#include "driver/gpio.h"
#include "driver/spi_master.h"
static const char *TAG = "LORA_RECEIVER";
#define LORA_HOST    SPI2_HOST
#define LORA_MOSI    GPIO_NUM_11
#define LORA_MISO    GPIO_NUM_13
#define LORA_SCLK    GPIO_NUM_12
#define LORA_CS      GPIO_NUM_10
#define LORA_RST     GPIO_NUM_9
#define LORA_DIO0    GPIO_NUM_14
#define REG_OP_MODE              0x01
#define REG_FIFO                 0x00
#define REG_FRF_MSB              0x06
#define REG_FRF_MID              0x07
#define REG_FRF_LSB              0x08
#define REG_PA_CONFIG            0x09
#define REG_LNA                  0x0C
#define REG_FIFO_ADDR_PTR        0x0D
#define REG_FIFO_TX_BASE_ADDR    0x0E
#define REG_FIFO_RX_BASE_ADDR    0x0F
#define REG_IRQ_FLAGS            0x12
#define REG_RX_NB_BYTES          0x13
#define REG_MODEM_CONFIG_1       0x1D
#define REG_MODEM_CONFIG_2       0x1E
#define REG_MODEM_CONFIG_3       0x26
#define REG_DIO_MAPPING_1        0x40
#define REG_VERSION              0x42
#define MODE_LORA                0x80
#define MODE_SLEEP               0x00
#define MODE_STDBY               0x01
#define MODE_RX_CONTINUOUS       0x05
#define IRQ_RX_DONE_MASK         0x40
spi_device_handle_t spi_handle_lora;
static QueueHandle_t lora_rx_queue;
uint8_t lora_read_reg(uint8_t reg) {
    uint8_t tx_data[2] = { reg & 0x7F, 0x00 };
    uint8_t rx_data[2] = { 0, 0 };
    spi_transaction_t t = {
        .length = 16,
        .tx_buffer = tx_data,
        .rx_buffer = rx_data,
    };
    gpio_set_level(LORA_CS, 0);
    spi_device_polling_transmit(spi_handle_lora, &t);
    gpio_set_level(LORA_CS, 1);
    return rx_data[1]; // Dữ liệu thực tế nằm ở byte thứ hai nhận về
}
void lora_write_reg(uint8_t reg, uint8_t val) {
    uint8_t tx_data[2] = {reg | 0x80, val}; // MSB=1 for write
    spi_transaction_t t = {
        .length = 16,
        .tx_buffer = &tx_data,
    };
    gpio_set_level(LORA_CS, 0);
    spi_device_polling_transmit(spi_handle_lora, &t);
    gpio_set_level(LORA_CS, 1);
}
static void IRAM_ATTR lora_dio0_isr_handler(void* arg) {
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    uint32_t gpio_num = (uint32_t) arg;
    xQueueSendFromISR(lora_rx_queue, &gpio_num, &xHigherPriorityTaskWoken);
    if (xHigherPriorityTaskWoken) {
        portYIELD_FROM_ISR();
    }
}
void lora_init() {
    ESP_LOGI(TAG, "Initializing LoRa module...");
    gpio_set_direction(LORA_RST, GPIO_MODE_OUTPUT);
    gpio_set_direction(LORA_CS, GPIO_MODE_OUTPUT);
    gpio_set_level(LORA_RST, 0);
    vTaskDelay(pdMS_TO_TICKS(10));
    gpio_set_level(LORA_RST, 1);
    vTaskDelay(pdMS_TO_TICKS(10));
    ESP_LOGI(TAG, "LoRa module reset.");
    spi_bus_config_t buscfg = {
        .mosi_io_num = LORA_MOSI,
        .miso_io_num = LORA_MISO,
        .sclk_io_num = LORA_SCLK,
        .quadwp_io_num = -1,
        .quadhd_io_num = -1,
        .max_transfer_sz = 0,
    };
    ESP_ERROR_CHECK(spi_bus_initialize(LORA_HOST, &buscfg, SPI_DMA_CH_AUTO));
    ESP_LOGI(TAG, "SPI bus initialized.");
    spi_device_interface_config_t devcfg = {
        .clock_speed_hz = 9000000, // 9 MHz
        .mode = 0,
        .spics_io_num = -1, // Tự quản lý chân CS
        .queue_size = 7,
    };
    ESP_ERROR_CHECK(spi_bus_add_device(LORA_HOST, &devcfg, &spi_handle_lora));
    ESP_LOGI(TAG, "LoRa device added to SPI bus.");
    lora_write_reg(REG_OP_MODE, MODE_SLEEP | MODE_LORA);
    vTaskDelay(pdMS_TO_TICKS(10));
    ESP_LOGI(TAG, "LoRa set to LORA_SLEEP mode.");
    uint8_t version = lora_read_reg(REG_VERSION);
    ESP_LOGI(TAG, "LoRa Version: 0x%02X", version);
    if (version != 0x12) {
        ESP_LOGE(TAG, "LoRa chip not detected! Check wiring.");
        while(1) { vTaskDelay(1); }
    }
    uint64_t freq = 433000000;
    uint64_t frf = (freq << 19) / 32000000;
    lora_write_reg(REG_FRF_MSB, (uint8_t)(frf >> 16));
    lora_write_reg(REG_FRF_MID, (uint8_t)(frf >> 8));
    lora_write_reg(REG_FRF_LSB, (uint8_t)(frf >> 0));
    ESP_LOGI(TAG, "Frequency set to 433MHz.");
    lora_write_reg(REG_FIFO_TX_BASE_ADDR, 0);
    lora_write_reg(REG_FIFO_RX_BASE_ADDR, 0);
    lora_write_reg(REG_LNA, lora_read_reg(REG_LNA) | 0x03);
    lora_write_reg(REG_MODEM_CONFIG_3, 0x04);    
    lora_write_reg(REG_MODEM_CONFIG_1, 0x72); // BW125, CR4/5, Implicit Header
    lora_write_reg(REG_MODEM_CONFIG_2, 0x74); // SF7, CRC On
    lora_write_reg(REG_OP_MODE, MODE_STDBY | MODE_LORA);
    vTaskDelay(pdMS_TO_TICKS(10));
    ESP_LOGI(TAG, "LoRa set to STANDBY mode.");
    ESP_LOGI(TAG, "LoRa initialization complete.");
}
void lora_rx_task(void *pvParameters) {
    ESP_LOGI(TAG, "LoRa RX task started.");
    uint32_t io_num;
    while (1) {
        if (xQueueReceive(lora_rx_queue, &io_num, portMAX_DELAY)) {
            ESP_LOGI(TAG, "Packet received! DIO0 interrupt on GPIO %lu", io_num);
            lora_write_reg(REG_OP_MODE, MODE_STDBY | MODE_LORA); 
            lora_write_reg(REG_IRQ_FLAGS, 0xFF); 
            int rx_len = lora_read_reg(REG_RX_NB_BYTES);
            lora_write_reg(REG_FIFO_ADDR_PTR, lora_read_reg(REG_FIFO_RX_BASE_ADDR));
            char rx_buffer[256] = {0};
            for (int i = 0; i < rx_len; i++) {
                rx_buffer[i] = lora_read_reg(REG_FIFO);
            }
            ESP_LOGI(TAG, "Received data (len=%d): %s", rx_len, rx_buffer);     
            lora_write_reg(REG_IRQ_FLAGS, IRQ_RX_DONE_MASK);
            lora_write_reg(REG_OP_MODE, MODE_RX_CONTINUOUS | MODE_LORA);
        }
    }
}

void app_main(void) {
    ESP_LOGI(TAG, "--- Start Application: LoRa Receiver Station ---");
    lora_rx_queue = xQueueCreate(10, sizeof(uint32_t));
    lora_init();
    gpio_set_direction(LORA_DIO0, GPIO_MODE_INPUT);
    gpio_set_intr_type(LORA_DIO0, GPIO_INTR_POSEDGE); // Ngắt cạnh lên
    gpio_install_isr_service(0);
    gpio_isr_handler_add(LORA_DIO0, lora_dio0_isr_handler, (void*) LORA_DIO0);
    ESP_LOGI(TAG, "DIO0 interrupt configured.");
    xTaskCreate(lora_rx_task, "lora_rx_task", 4096, NULL, 10, NULL);
    lora_write_reg(REG_DIO_MAPPING_1, 0x00);  
    lora_write_reg(REG_OP_MODE, MODE_RX_CONTINUOUS | MODE_LORA);
    ESP_LOGI(TAG, "LoRa is now in continuous receive mode. Waiting for packets...");
}
